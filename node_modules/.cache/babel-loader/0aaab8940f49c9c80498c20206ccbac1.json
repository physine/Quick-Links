{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { newKey } from '../../utils'; // =============== Slice Object ===============\n\nexport const navBarSlice = createSlice({\n  name: 'navBarList',\n  initialState: [],\n  reducers: {\n    addNavItem: (state, action) => {\n      state.push({\n        navItemKey: newKey(),\n        title: action.payload,\n        isSelected: false,\n        linkItemList: []\n      });\n    },\n    // navItemKey\n    // title\n    // isSelected\n    // linkItemList\n    deleteNavItem: (state, action) => {\n      if (state.length === 1) return []; // index of navItem to delete\n\n      let removeIndex;\n\n      for (let i = 0; i < state.length; ++i) {\n        if (action.payload === state[i].navItemKey) {\n          removeIndex = i;\n          return [...state.slice(0, removeIndex), ...state.slice(removeIndex + 1, state.length)];\n        }\n      }\n    },\n    toggleIsSelected: (state, action) => {\n      // first de-select the current selected nav item\n      let CurrentIsSelectedIndex;\n\n      for (let i = 0; i < state.length; ++i) {\n        if (state[i].isSelected) CurrentIsSelectedIndex = i;\n      } // second, find the nav item which needs to be selected\n\n\n      let newIsSelectedIndex;\n\n      for (let i = 0; i < state.length; ++i) if (state[i].navItemKey) newIsSelectedIndex = i;\n\n      return [...state.slice(0, CurrentIsSelectedIndex), state[CurrentIsSelectedIndex].navItemKey, state[CurrentIsSelectedIndex].title, state[CurrentIsSelectedIndex].isSelected, state[CurrentIsSelectedIndex].linkItemList];\n    },\n    addLinkItem: (state, action) => {\n      for (let i = 0; i < state.length; ++i) {\n        if (state[i].isSelected) {\n          state[i].linkItemList.push({\n            linkItemKey: newKey(),\n            url: action.payload,\n            isFav: false\n          });\n          break;\n        }\n      } // navItemKey\n      // title (nav bar display text)  \n      // sub list of urls\n      // linkItemKey\n      // url\n      // isFav\n\n    },\n    updateLinkItemUrl: (state, action) => {},\n    deleteLinkItem: (state, action) => {//return state.\n    },\n    toggleFav: (state, action) => {}\n  }\n}); // =============== Selectors ===============\n\nexport const selectNavBarList = state => state.navBarList; // =============== Exports ===============\n\nexport const {\n  addNavItem,\n  deleteNavItem,\n  addLinkItem,\n  updateLinkItemUrl,\n  deleteLinkItem,\n  toggleFav,\n  toggleIsSelected\n} = navBarSlice.actions;\nexport default navBarSlice.reducer;","map":{"version":3,"names":["createSlice","newKey","navBarSlice","name","initialState","reducers","addNavItem","state","action","push","navItemKey","title","payload","isSelected","linkItemList","deleteNavItem","length","removeIndex","i","slice","toggleIsSelected","CurrentIsSelectedIndex","newIsSelectedIndex","addLinkItem","linkItemKey","url","isFav","updateLinkItemUrl","deleteLinkItem","toggleFav","selectNavBarList","navBarList","actions","reducer"],"sources":["C:/Users/Aaron/Documents/prograns/web/quickLinks/quick-links/src/features/navBarList/navBarSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nimport { newKey } from '../../utils'\r\n\r\n// =============== Slice Object ===============\r\nexport const navBarSlice = createSlice({\r\n    name:'navBarList',\r\n    initialState:[],\r\n    reducers:{\r\n        addNavItem:(state, action) => {         \r\n            state.push({\r\n                navItemKey:newKey(),\r\n                title:action.payload,\r\n                isSelected:false,\r\n                linkItemList:[]    \r\n            })\r\n        },        \r\n        // navItemKey\r\n        // title\r\n        // isSelected\r\n        // linkItemList\r\n\r\n        deleteNavItem:(state, action) => {\r\n            if(state.length === 1)\r\n                return []\r\n\r\n            // index of navItem to delete\r\n            let removeIndex\r\n            for(let i=0; i<state.length; ++i){\r\n                if(action.payload === state[i].navItemKey){\r\n                    removeIndex = i\r\n                    return [\r\n                        ...state.slice(0, removeIndex),\r\n                        ...state.slice(removeIndex+1, state.length)\r\n                    ]   \r\n                }\r\n            }                      \r\n        },\r\n\r\n        toggleIsSelected:(state, action) => {\r\n            // first de-select the current selected nav item\r\n            let CurrentIsSelectedIndex\r\n            for(let i=0; i<state.length; ++i){\r\n                if(state[i].isSelected)\r\n                CurrentIsSelectedIndex = i\r\n            }\r\n\r\n            // second, find the nav item which needs to be selected\r\n            let newIsSelectedIndex\r\n            for(let i=0; i<state.length; ++i)\r\n                if(state[i].navItemKey)\r\n                newIsSelectedIndex = i\r\n\r\n            return [\r\n                ...state.slice(0, CurrentIsSelectedIndex),\r\n                state[CurrentIsSelectedIndex].navItemKey,\r\n                state[CurrentIsSelectedIndex].title,\r\n                state[CurrentIsSelectedIndex].isSelected,\r\n                state[CurrentIsSelectedIndex].linkItemList,\r\n            ]\r\n\r\n        },\r\n\r\n        addLinkItem:(state, action) => {            \r\n            for(let i=0; i<state.length; ++i){\r\n                if(state[i].isSelected){                    \r\n                    state[i].linkItemList.push({\r\n                        linkItemKey:newKey(),\r\n                        url:action.payload,\r\n                        isFav:false\r\n                    })\r\n                    break\r\n                }                \r\n            }            \r\n                // navItemKey\r\n                // title (nav bar display text)  \r\n                // sub list of urls\r\n                    // linkItemKey\r\n                    // url\r\n                    // isFav\r\n\r\n        },\r\n        updateLinkItemUrl:(state, action) => {\r\n\r\n        },\r\n        deleteLinkItem:(state, action) => {\r\n            //return state.\r\n        },\r\n\r\n        toggleFav:(state, action) => {\r\n\r\n        }\r\n    }\r\n})\r\n\r\n// =============== Selectors ===============\r\nexport const selectNavBarList = state => state.navBarList\r\n\r\n// =============== Exports ===============\r\nexport const {\r\n    addNavItem,\r\n    deleteNavItem,\r\n    addLinkItem,\r\n    updateLinkItemUrl,\r\n    deleteLinkItem,\r\n    toggleFav,\r\n    toggleIsSelected\r\n} = navBarSlice.actions\r\n\r\nexport default navBarSlice.reducer"],"mappings":"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"},"metadata":{},"sourceType":"module"}