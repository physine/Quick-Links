{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { newKey } from '../../utils'; // =============== Slice Object ===============\n\nexport const navBarSlice = createSlice({\n  name: 'navBarList',\n  initialState: [],\n  reducers: {\n    addNavItem: (state, action) => {\n      let isSelectedState = false;\n      if (state.length === 0) isSelectedState = true;\n      state.push({\n        navItemKey: newKey(),\n        title: action.payload,\n        isSelected: isSelectedState,\n        linkItemList: []\n      });\n    },\n    // navItemKey\n    // title\n    // isSelected\n    // linkItemList\n    deleteNavItem: (state, action) => {\n      if (state.length === 1) return []; // index of navItem to delete\n\n      let removeIndex;\n\n      for (let i = 0; i < state.length; ++i) {\n        if (action.payload === state[i].navItemKey) {\n          removeIndex = i;\n          return [...state.slice(0, removeIndex), ...state.slice(removeIndex + 1, state.length)];\n        }\n      }\n    },\n    toggleIsSelected: (state, action) => {\n      // first de-select the current selected nav item\n      for (let i = 0; i < state.length; ++i) {\n        if (state[i].isSelected) state[i].isSelected = false;\n      } // second, find the nav item which needs to be selected\n\n\n      for (let i = 0; i < state.length; ++i) if (state[i].navItemKey === action.payload) state[i].isSelected = true;\n\n      return state;\n    },\n    addLinkItem: (state, action) => {\n      for (let i = 0; i < state.length; ++i) {\n        if (state[i].isSelected) {\n          state[i].linkItemList.push({\n            linkItemKey: newKey(),\n            url: action.payload,\n            isFav: false,\n            isInFocus: false\n          });\n        }\n      } // navItemKey\n      // title (nav bar display text)  \n      // sub list of urls\n      // linkItemKey\n      // url\n      // isFav\n\n    },\n    updateLinkItemUrl: (state, action) => {},\n    deleteLinkItem: (state, action) => {//return state.\n    },\n    toggleFav: (state, action) => {},\n    toggleFocus: (state, action) => {\n      let navItemIndex;\n      let linkItemIndex;\n\n      for (let i = 0; i < state.length; ++i) {\n        if (state[i].isSelected) {\n          navItemIndex = i;\n\n          for (let j = 0; j < state[i].linkItemList.length; ++j) {\n            if (state[i].linkItemList[j] === action.payload) {\n              linkItemIndex = j;\n              break;\n            }\n          }\n        }\n      }\n\n      return [...state.slice(0, navItemIndex), ...state.slice(navItemIndex)];\n    }\n  }\n}); // =============== Selectors ===============\n\nexport const selectNavBarList = state => state.navBarList;\nexport const selectIsSelectedLinkItemList = state => {\n  for (let i = 0; i < state.navBarList.length; ++i) {\n    if (state.navBarList[i].isSelected) return state.navBarList[i].linkItemList;\n  }\n};\nexport const selectFocusedUrlText = state => {}; //export const select\n// =============== Exports ===============\n\nexport const {\n  addNavItem,\n  deleteNavItem,\n  addLinkItem,\n  updateLinkItemUrl,\n  deleteLinkItem,\n  toggleFav,\n  toggleIsSelected,\n  toggleFocus\n} = navBarSlice.actions;\nexport default navBarSlice.reducer;","map":{"version":3,"names":["createSlice","newKey","navBarSlice","name","initialState","reducers","addNavItem","state","action","isSelectedState","length","push","navItemKey","title","payload","isSelected","linkItemList","deleteNavItem","removeIndex","i","slice","toggleIsSelected","addLinkItem","linkItemKey","url","isFav","isInFocus","updateLinkItemUrl","deleteLinkItem","toggleFav","toggleFocus","navItemIndex","linkItemIndex","j","selectNavBarList","navBarList","selectIsSelectedLinkItemList","selectFocusedUrlText","actions","reducer"],"sources":["C:/Users/Aaron/Documents/prograns/web/quickLinks/quick-links/src/features/navBarList/navBarSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nimport { newKey } from '../../utils'\r\n\r\n// =============== Slice Object ===============\r\nexport const navBarSlice = createSlice({\r\n    name:'navBarList',\r\n    initialState:[],\r\n    reducers:{\r\n        addNavItem:(state, action) => {         \r\n            let isSelectedState = false\r\n            if(state.length === 0)\r\n                isSelectedState = true\r\n\r\n            state.push({\r\n                navItemKey:newKey(),\r\n                title:action.payload,\r\n                isSelected:isSelectedState,\r\n                linkItemList:[]    \r\n            })\r\n        },        \r\n        // navItemKey\r\n        // title\r\n        // isSelected\r\n        // linkItemList\r\n\r\n        deleteNavItem:(state, action) => {\r\n            if(state.length === 1)\r\n                return []\r\n\r\n\r\n            // index of navItem to delete\r\n            let removeIndex\r\n            for(let i=0; i<state.length; ++i){\r\n                if(action.payload === state[i].navItemKey){\r\n                    removeIndex = i\r\n                    return [\r\n                        ...state.slice(0, removeIndex),\r\n                        ...state.slice(removeIndex+1, state.length)\r\n                    ]   \r\n                }\r\n            }                      \r\n        },\r\n\r\n        toggleIsSelected:(state, action) => {\r\n            // first de-select the current selected nav item\r\n            for(let i=0; i<state.length; ++i){\r\n                if(state[i].isSelected)\r\n                    state[i].isSelected = false\r\n            }\r\n            // second, find the nav item which needs to be selected\r\n            for(let i=0; i<state.length; ++i)\r\n                if(state[i].navItemKey === action.payload)\r\n                    state[i].isSelected = true\r\n\r\n            return state\r\n        },\r\n\r\n        addLinkItem:(state, action) => {            \r\n            for(let i=0; i<state.length; ++i){\r\n                if(state[i].isSelected){                    \r\n                    state[i].linkItemList.push({\r\n                        linkItemKey:newKey(),\r\n                        url:action.payload,\r\n                        isFav:false,\r\n                        isInFocus: false\r\n                    })                    \r\n                }                \r\n            }            \r\n                // navItemKey\r\n                // title (nav bar display text)  \r\n                // sub list of urls\r\n                    // linkItemKey\r\n                    // url\r\n                    // isFav\r\n\r\n        },\r\n        updateLinkItemUrl:(state, action) => {\r\n\r\n        },\r\n        deleteLinkItem:(state, action) => {\r\n            //return state.\r\n        },\r\n\r\n        toggleFav:(state, action) => {\r\n\r\n        },\r\n\r\n        toggleFocus:(state, action) => {\r\n            let navItemIndex\r\n            let linkItemIndex\r\n            for(let i=0; i<state.length; ++i){\r\n                if(state[i].isSelected){\r\n                    navItemIndex = i\r\n                    for(let j=0; j<state[i].linkItemList.length; ++j){\r\n                        if(state[i].linkItemList[j] === action.payload){\r\n                            linkItemIndex = j\r\n                            break\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            return [\r\n                ...state.slice(0, navItemIndex),\r\n                ...state.slice(navItemIndex, )\r\n            ]\r\n        }\r\n    }\r\n})\r\n\r\n// =============== Selectors ===============\r\nexport const selectNavBarList = state => state.navBarList\r\n\r\nexport const selectIsSelectedLinkItemList = state => {\r\n    for(let i=0; i<state.navBarList.length; ++i){\r\n        if(state.navBarList[i].isSelected)\r\n            return state.navBarList[i].linkItemList\r\n    }\r\n}\r\n\r\nexport const selectFocusedUrlText = state => {\r\n\r\n}\r\n\r\n//export const select\r\n\r\n\r\n// =============== Exports ===============\r\nexport const {\r\n    addNavItem,\r\n    deleteNavItem,\r\n    addLinkItem,\r\n    updateLinkItemUrl,\r\n    deleteLinkItem,\r\n    toggleFav,\r\n    toggleIsSelected,\r\n    toggleFocus\r\n} = navBarSlice.actions\r\n\r\nexport default navBarSlice.reducer"],"mappings":"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"},"metadata":{},"sourceType":"module"}