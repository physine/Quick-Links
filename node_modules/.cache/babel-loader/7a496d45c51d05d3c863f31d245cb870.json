{"ast":null,"code":"const max = 100000000; // 100,000,000\n\nconst min = 1;\nexport const newKey = () => Math.floor(Math.random() * (max - min) + min);\nexport const getSelectedNavLinkItemList = state => {\n  for (let i = 0; i < state.navBarList.length; ++i) if (state.navBarList[i].isSelected) return state.navBarList[i].linkItemList;\n};\nexport const getSelectedNavLinkItemListIndex = state => {\n  for (let i = 0; i < state.navBarList.length; ++i) if (state.navBarList[i].isSelected) return i;\n};\nexport const getInFocusLinkItemIndex = state => {\n  for (let i = 0; i < state.length; ++i) {\n    if (state[i].isSelected) {\n      for (let j = 0; j < state[i].linkItemList.length; ++j) {\n        if (state[i].linkItemList[j].isInFocus) {\n          return j;\n        }\n      }\n    }\n  }\n};\nexport const getInFocusLinkItemUrlText = state => {\n  for (let i = 0; i < state.length; ++i) {\n    if (state[i].isSelected) {\n      for (let j = 0; j < state[i].linkItemList.length; ++j) {\n        if (state[i].linkItemList[j].isInFocus) {\n          return state[i].linkItemList[j].url;\n        }\n      }\n    }\n  }\n};\nexport const getNavItemIndexByKey = (state, key) => {\n  for (let i = 0; i < state.length; ++i) if (state[i].navItemKey === key) return i;\n}; // =========================== Filters =========================== //\n\nexport const applyLinkListFilters = (linkItemList, linkItemSearch) => {\n  linkItemList = linkItemList.filter(linkItem => linkItem.isFav === true);\n\n  if (linkItemSearch) {\n    linkItemList = linkItemList.filter(linkItem => {});\n  } //linkItemList = linkItemList.filter(linkItem => linkItem.)\n\n\n  return linkItemList;\n};","map":{"version":3,"names":["max","min","newKey","Math","floor","random","getSelectedNavLinkItemList","state","i","navBarList","length","isSelected","linkItemList","getSelectedNavLinkItemListIndex","getInFocusLinkItemIndex","j","isInFocus","getInFocusLinkItemUrlText","url","getNavItemIndexByKey","key","navItemKey","applyLinkListFilters","linkItemSearch","filter","linkItem","isFav"],"sources":["C:/Users/Aaron/Documents/prograns/web/quickLinks/quick-links/src/utils.js"],"sourcesContent":["const max = 100000000 // 100,000,000\r\nconst min = 1\r\nexport const newKey = () =>  Math.floor ( Math.random() * (max - min) + min )\r\n\r\nexport const getSelectedNavLinkItemList = state => {\r\n    for(let i=0; i<state.navBarList.length; ++i)\r\n        if(state.navBarList[i].isSelected)\r\n            return state.navBarList[i].linkItemList\r\n}\r\n\r\nexport const getSelectedNavLinkItemListIndex = state => {\r\n    for(let i=0; i<state.navBarList.length; ++i)\r\n        if(state.navBarList[i].isSelected)\r\n            return i\r\n}\r\n\r\nexport const getInFocusLinkItemIndex = state => {\r\n    for(let i=0; i<state.length; ++i){\r\n        if(state[i].isSelected){\r\n            for(let j=0; j<state[i].linkItemList.length; ++j){\r\n                if(state[i].linkItemList[j].isInFocus){\r\n                    return j\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const getInFocusLinkItemUrlText = state => {\r\n    for(let i=0; i<state.length; ++i){\r\n        if(state[i].isSelected){\r\n            for(let j=0; j<state[i].linkItemList.length; ++j){\r\n                if(state[i].linkItemList[j].isInFocus){\r\n                    return state[i].linkItemList[j].url\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const getNavItemIndexByKey = (state, key) => {\r\n    for(let i=0; i<state.length; ++i)\r\n        if(state[i].navItemKey === key)\r\n            return i\r\n}\r\n\r\n\r\n// =========================== Filters =========================== //\r\n\r\nexport const applyLinkListFilters = (linkItemList, linkItemSearch) => {\r\n    linkItemList = linkItemList.filter(linkItem => linkItem.isFav === true)\r\n    if(linkItemSearch){\r\n        linkItemList = linkItemList.filter(linkItem => {\r\n            \r\n        })\r\n    }\r\n    //linkItemList = linkItemList.filter(linkItem => linkItem.)\r\n    return linkItemList\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}